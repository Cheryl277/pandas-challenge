#!/usr/bin/env python
# coding: utf-8

# In[4]:


# Dependencies and Setup
import pandas as pd

# File to Load
school_data_to_load = "Resources/schools_complete.csv"
student_data_to_load = "Resources/students_complete.csv"

# Read School and Student Data File and store into Pandas Data Frames
school_data = pd.read_csv(school_data_to_load)
student_data = pd.read_csv(student_data_to_load)

# Combine the data into a single dataset
school_data_complete = pd.merge(student_data, school_data, how="left", on=["school_name", "school_name"])
school_data_complete


# In[10]:


#District Summary:

total_schools = school_data_complete.groupby('school_name').count()
total_students = school_data_complete.groupby('Student ID').count()
sdcbyschool = school_data_complete.groupby('School ID').max()
sum_column = sdcbyschool['budget'].sum()
avg_math_score = school_data_complete["math_score"].mean()
avg_reading_score = school_data_complete["reading_score"].mean()
passing_math = school_data_complete[school_data_complete['math_score'] >= 70]
passing_math_count = passing_math['student_name'].count()   
percent_passing_math = passing_math_count / len(total_students) * 100
passing_reading = school_data_complete[school_data_complete['reading_score'] >= 70]
passing_reading_count = passing_reading['student_name'].count()
percent_passing_reading = passing_reading_count / len(total_students) * 100
overall_passing = school_data_complete[(school_data_complete['math_score'] >= 70) & (school_data_complete['reading_score']>=70)] 
overall_passing_count = overall_passing['student_name'].count()
percent_overall_passing = overall_passing_count / len(total_students) * 100
df = pd.DataFrame({'Total Schools': [len(total_schools)], 'Total Students': [len(total_students)], 'Total Budget': [sum_column], 'Average Math Score': [avg_math_score], 'Average Reading Score': [avg_reading_score], '% Passing Math': [percent_passing_math], '% Passing Reading': [percent_passing_reading], '% Overall Passing': [percent_overall_passing]})
print(df)


# In[19]:



school_summary = school_data_complete.groupby(['school_name'])
school_names = school_data_complete.school_name.sort_values().unique()
school_types = school_data.sort_values(by="school_name").type
school_total_students = list(school_summary.student_name.count())
school_budget = list(school_summary.budget.mean())
school_per_student_budget = [i/j for i,j in zip(school_budget,school_total_students)]
school_avg_math_score = list(school_summary.math_score.mean())
school_avg_reading_score = list(school_summary.reading_score.mean())

# Calculating passing percentages
school_summary = school_data_complete[school_data_complete['math_score'] >= 70].groupby(['school_name'])
school_pct_passing_math = [(i/j)*100 for i,j in zip(school_summary.math_score.count(),school_total_students)]
school_summary = school_data_complete[school_data_complete['reading_score'] >= 70].groupby(['school_name'])
school_pct_passing_reading = [(i/j)*100 for i,j in zip(school_summary.reading_score.count(),school_total_students)]
school_overall_passing = [(i+j)/2 for i,j in zip(school_pct_passing_math,school_pct_passing_reading)]

# Compile all calculations into dataframe
school_summary_df = pd.DataFrame({"School Names":school_names,
                                  "School Type":school_types,
                                  "Total Students":school_total_students,
                                  "Total School Budget":school_budget,
                                  "Per Student Budget":school_per_student_budget,
                                  "Average Math Score":school_avg_math_score,
                                  "Average Reading Score":school_avg_reading_score,
                                  "% Passing Math":school_pct_passing_math,
                                  "% Passing Reading":school_pct_passing_reading,
                                  "Overall Passing Rate":school_overall_passing})

school_summary_df = school_summary_df.reset_index(drop=True)
school_summary_df


# In[20]:


#Top 5 Schools:
top_5 = school_summary_df.sort_values(by='Overall Passing Rate', ascending=False).head(5).reset_index(drop=True)
top_5


# In[21]:


#Bottom 5 Schools:
bot_5 = school_summary_df.sort_values(by='Overall Passing Rate', ascending=True).head(5).reset_index(drop=True)
bot_5


# In[ ]:


# Function to create series for average math score by grade
def average_math_by_grade(grade):
    school_summary = school_data_complete.loc[school_data_complete.grade == grade].groupby(['school_name'])
    school_names = school_data_complete.school_name.sort_values().unique()
    school_avg_math_score = list(school_summary.math_score.mean())

    # Compile all calculations into dataframe
    average_math_df = pd.DataFrame({"School Names":school_names,
                                    f"{grade} Avg Math Score":school_avg_math_score})

    average_math_df = average_math_df.reset_index(drop=True)
    return average_math_df

# Function to create series for average reading score by grade
def average_reading_by_grade(grade):
    school_summary = school_data_complete.loc[school_data_complete.grade == grade].groupby(['school_name'])
    school_names = school_data_complete.school_name.sort_values().unique()
    school_avg_reading_score = list(school_summary.reading_score.mean())

    # Compile all calculations into dataframe
    average_reading_df = pd.DataFrame({"School Names":school_names,
                                    f"{grade} Avg Reading Score":school_avg_reading_score})

    average_reading_df = average_reading_df.reset_index(drop=True)
    return average_reading_df


# In[27]:


# Create series for each grade and group by school (math)
grade_9 = average_math_by_grade('9th')
grade_10 = average_math_by_grade('10th')
grade_11 = average_math_by_grade('11th')
grade_12 = average_math_by_grade('12th')
avg_math_score_by_grade = pd.merge(grade_9,grade_10,how='inner',suffixes=('',''))
avg_math_score_by_grade = pd.merge(avg_math_score_by_grade,grade_11,how='inner',suffixes=('',''))
avg_math_score_by_grade = pd.merge(avg_math_score_by_grade,grade_12,how='inner',suffixes=('',''))
avg_math_score_by_grade


# In[28]:


# Create series for each grade and group by school (reading)
grade_9 = average_reading_by_grade('9th')
grade_10 = average_reading_by_grade('10th')
grade_11 = average_reading_by_grade('11th')
grade_12 = average_reading_by_grade('12th')
avg_reading_score_by_grade = pd.merge(grade_9,grade_10,how='inner',suffixes=('',''))
avg_reading_score_by_grade = pd.merge(avg_reading_score_by_grade,grade_11,how='inner',suffixes=('',''))
avg_reading_score_by_grade = pd.merge(avg_reading_score_by_grade,grade_12,how='inner',suffixes=('',''))
avg_reading_score_by_grade


# In[37]:


# Sample bins: 
spending_bins = [0, 585, 615, 645, 675]
group_names = ["<$585", "$585-615", "$615-645", "$645-675"]

scores_by_spending = school_summary_df[["School Names",
                                    "Average Math Score",
                                    "Average Reading Score",
                                    "% Passing Math",
                                    "% Passing Reading",
                                    "Overall Passing Rate"]]
scores_by_spending["Spending Summary"] = pd.cut(school_summary_df["Per Student Budget"], spending_bins, labels=group_names)
scores_by_spending = scores_by_spending.groupby(["Spending Summary"])
scores_by_spending.mean()


# In[33]:


# Sample bins. Feel free to create your own bins.
size_bins = [0, 1000, 2000, 5000]
group_names = ["Small (<1000)", "Medium (1000-2000)", "Large (2000-5000)"]

scores_by_school_size = school_summary_df[["School Names",
                                    "Average Math Score",
                                    "Average Reading Score",
                                    "% Passing Math",
                                    "% Passing Reading",
                                    "Overall Passing Rate"]]
scores_by_school_size["School Size Summary"] = pd.cut(school_summary_df["Total Students"], size_bins, labels=group_names)
scores_by_school_size = scores_by_school_size.groupby(["School Size Summary"])
scores_by_school_size.mean()


# In[34]:


scores_by_type = school_summary_df[["School Names",
                                    "School Type",
                                    "Average Math Score",
                                    "Average Reading Score",
                                    "% Passing Math",
                                    "% Passing Reading",
                                    "Overall Passing Rate"]]
scores_by_type = scores_by_type.groupby("School Type")
scores_by_type.mean()


# In[ ]:




